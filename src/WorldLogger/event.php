<?phpnamespace WorldLogger;use pocketmine\Player;use pocketmine\plugin\PluginBase;use pocketmine\event\Listener;use pocketmine\event\entity\EntityExplodeEvent;use pocketmine\event\block\BlockPlaceEvent;use pocketmine\event\block\BlockBreakEvent;use pocketmine\event\block\BlockUpdateEvent;use pocketmine\event\player\PlayerBucketEvent;use pocketmine\event\player\PlayerInteractEvent;use pocketmine\event\player\PlayerBucketFillEvent;use pocketmine\math\Vector3;use pocketmine\Server;use pocketmine\block\StillWater;use pocketmine\block\StillLava;use pocketmine\block\Air;use pocketmine\item\item;class event implements Listener{	public function __construct(Main $plugin, SQLiteDatabase $sql)	{		$this->sql = $sql;		$this->plugin = $plugin;	}			/* public function onBlock(BlockUpdateEvent $BUE)	{		//$block=$BUE->getBlock();		//$this->sql->add(2,$block,"PocketMine");	} */			public function onPlace(BlockPlaceEvent $e)	{		$player = $e->getPlayer();		$block = $e->getBlock();		if($this->plugin->getIn($player))		{			//检测查询模式			$player->sendMessage(Main::PREFIX.$this->sql->查询($block, 1, $player));			$e->setCancelled(true);		}		if($e->isCancelled()) return null;		$this->sql->add(0, $block, $player->getName());	}			public function onBreak(BlockBreakEvent $e)	{		$player = $e->getPlayer();		$block = $it = $e->getBlock();		if($this->plugin->getIn($player))		{			//检测查询模式			$player->sendMessage(Main::PREFIX.$this->sql->查询($block, 1, $player));			$e->setCancelled(true);		}		if($e->isCancelled()) return null;		$this->sql->add(1, $it, $player->getName());	}			public function onAct(PlayerInteractEvent $e)	{		$block = $e->getBlock();		$player = $e->getPlayer();		$inv = $player->getInventory();		$iteminhand = $inv->getItemInHand();		$i = $iteminhand->getID();		$d = $iteminhand->getDamage();		$level = $block->getLevel();				if($e->isCancelled()) return null;		$v = new Vector3($block->getX(), $block->getY(), $block->getZ());		switch($e->getFace())		{			case 0:				$v = new Vector3($block->getX(), $block->getY() - 1, $block->getZ());			break;						case 1:				$v = new Vector3($block->getX(), $block->getY() + 1, $block->getZ());			break;						case 2:				$v = new Vector3($block->getX(), $block->getY(), $block->getZ() - 1);			break;						case 3:				$v = new Vector3($block->getX(), $block->getY(), $block->getZ() + 1);			break;						case 4:				$v = new Vector3($block->getX() - 1, $block->getY(), $block->getZ());			break;						case 5:				$v = new Vector3($block->getX() + 1, $block->getY(), $block->getZ());			break;		}				$replaceblock = $level->getBlock($v);		if($i == 325 && ($d >= 8 && $d <= 9))		{			$this->sql->add(4, $replaceblock, $e->getPlayer()->getName());		}		else		{			if($i == 325)			{				if($block->getID() >= 8 && $block->getID() <= 9)				{					$this->sql->add(3, $block, $e->getPlayer()->getName());				}			}		}		if($i == 325 && ($d >= 10 && $d <= 11))		{			$this->sql->add(6, $replaceblock, $e->getPlayer()->getName());		}		else		{			if($i == 325)			{				if($block->getID() >= 10 && $block->getID() <= 11)				{					$this->sql->add(5, $block, $e->getPlayer()->getName());				}			}		}	}			public function onBoom(EntityExplodeEvent $boom)	{		if ($boom->isCancelled()) return null;		$this->sql->boom($boom);	}		}?>