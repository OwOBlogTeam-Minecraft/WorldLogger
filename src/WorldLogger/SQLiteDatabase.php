<?phpnamespace WorldLogger;use pocketmine\level\Level;use pocketmine\Player;use pocketmine\Server;use pocketmine\utils\Config;use pocketmine\block\Block;use pocketmine\item\Item;use pocketmine\event\entity\EntityExplodeEvent;class SQLiteDatabase{	private $last = [];	private $ala = [];			public function __construct($fileName, $plugin)	{				$this->sql = new \SQLite3($fileName);		$this->sql->exec("CREATE TABLE IF NOT EXISTS zhy(\r\n\t\t\tID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n\t\t\ttype INTEGER NOT NULL,\r\n\t\t\tplayer TEXT NOT NULL,\r\n\t\t\tx INTEGER NOT NULL,\r\n\t\t\ty INTEGER NOT NULL,\r\n\t\t\tz INTEGER NOT NULL,\r\n\t\t\tdata TEXT NOT NULL,\r\n\t\t\tworld TEXT NOT NULL,\r\n\t\t\ttime INTEGER NOT NULL\t)");		$this->plugin = $plugin;	}			public function add($type, Block $block, $player)	{		$time = time();		$x = $block->getX();		$y = $block->getY();		$z = $block->getZ();		$id = $block->getID();		$damage = $block->getDamage();		$world = $block->getLevel()->getName();		$data = "{$id}:{$damage}";		$this->sql->exec("INSERT INTO zhy (type, player, x, y, z,data,world,time) VALUES ({$type},'{$player}',{$x},{$y},{$z},'{$data}','{$world}','{$time}');");	}			public function boom(EntityExplodeEvent $event)	{		$type = 1;		$time = time();		$blocks = $event->getBlockList();		$sql = "";		$x = 0;		$y = 0;		$z = 0;		$world = "";		foreach($blocks as $b)		{			$x = $b->getX();			$y = $b->getY();			$z = $b->getZ();			$id = $b->getID();			$world = $b->getLevel()->getName();			$damage = $b->getDamage();			$data = "{$id}:{$damage}";			$sql .= "select{$type},'#TNT',{$x},{$y},{$z},'{$data}','{$world}','{$time}' union ";		}		$this->plugin->getServer()->getLogger()->warning(Main::PREFIX."已记录日志: TNT爆炸发生在 (x={$x}, y={$y}, z={$z}, world={$world}) 附近.");		$str = "INSERT INTO zhy (type, player, x, y, z,data,world,time)" . substr($sql, 0, strlen($sql) - 7) . ";";		$this->sql->exec($str);	}			public function 查询($block, $number = 1, Player $player)	{		$每页 = 5;		$x = $block->getX();		$y = $block->getY();		$z = $block->getZ();		$world = $block->getLevel()->getName();		$l = isset($this->last[$player->getName()]) ? $this->last[$player->getName()] : null;				if($block == null) $block = $l;		if($block == null) return "§c页码不存在.";				$getnum = "select count(*) as num from zhy where x={$x} and y={$y} and z={$z} and world='{$world}' order by time asc;";		$re = $this->sql->query($getnum);		$f = $re->fetchArray(SQLITE3_ASSOC);				if(is_bool($f)) return "§c未查询到条目.";		$num = $f['num'];		if($num == null || $num == 0) return "§c未查询到条目.";		$pages = ($num % $每页 == 0) ? ($num / $每页) : ((int) ($num / $每页) + 1);		if($pages == 0) $pages = 1;		if($number > $pages) return "§c页码超过范围! §f(§e{$number} §d/ §e{$pages}§f)";						$sql = "select * from zhy where x={$x} and y={$y} and z={$z} and world='{$world}' order by time asc;";		$result = $this->sql->query($sql);		$str = "";		$str .= "§e-=§3方块查询结果§e=-§f\n";		$cou = 0;		$first = $number * $每页 - $每页 + 1;		$end = $number * $每页;		while(!is_bool($ret = $result->fetchArray(SQLITE3_ASSOC)))		{			$cou++;			if($first <= $cou && $cou <= $end)			{				$pl = $ret["player"];				$ti = $ret["time"];				$action = $this->行为($ret["type"]);				$data = $ret["data"];				$canread = $this->时间可读函数($ti);				$arr = explode(":", $data);				if(count($arr) >= 2)				{					$bl = new Item($arr[0], $arr[1]);					$bname = $bl->getName();				}				else $bname = "Unknown";				if($bname == "") $bname = "Unknown";				$str .= "时间: §b{$canread} §f-  §e玩家: §6{$pl}§e, 行为: §6{$action}§e, 方块: §c{$data} §f({$bname}§f)\n";			}		}		$str .= "-========({$number}/{$pages})=======-\n";		if($number == 1) $str .= "使用 §d/§6".Main::MAIN_COMMAND." page §f<§e页码§f> 进行翻页";		$last[$player->getName()] = $block;		return $str;	}			public function 时间可读函数($n)	{		$h = time();		$h -= $n;		if($h < 60)                            $r = $h . '秒前';		elseif($h >= 60 && $h < 3600)          $r = floor($h / 60) . '分钟前';		elseif($h >= 3600 && $h < 86400)       $r = floor($h / 3600) . '小时前';		elseif($h >= 86400 && $h < 2592000)    $r = floor($h / 86400) . '天前';		elseif($h >= 2592000 && $h < 15552000) $r = floor($h / 2592000) . '个月前';		return $r;	}			public function 高级查询($r, $str = "", $number = 1, Player $player)	{		if($r == 0)		{			$x = isset($this->ala[$player->getName()]) ? $this->ala[$player->getName()] : null;			$aa = explode("[|]", $x);			if(count($aa) < 2)			{				return "§c页码不存在.";			}			$str = $aa[0];			$r = $aa[1];		}		if($r >= 100)		{			return "§c半径不能超过100, 否则大量枚举方块可能导致服务器卡顿.";		}				$cou = 0;		$每页 = 3;		$x = $player->getX();		$y = $player->getY();		$z = $player->getZ();		$radius = intval($r / 2);		$world  = $player->getLevel()->getName();		$xlow   = $x - $radius;		$xhigh  = $x + $radius;		$ylow   = $y - $radius;		$yhigh  = $y + $radius;		$zlow   = $z - $radius;		$zhigh  = $z + $radius;		$jiexi  = $this->文本解析($str);		$s = "select count(*) as total from zhy where x>={$xlow} and x<={$xhigh} and y>={$ylow} and y<={$yhigh} and z>={$zlow} and z<={$zhigh} and world='{$world}'{$jiexi} order by time asc;";		$re = $this->sql->query($s);		$f = $re->fetchArray(SQLITE3_ASSOC);				if(is_bool($f)) return "§c未查询到条目.";		$num = $f['total'];		if($num == null || $num == 0) return "§未查询到条目.";		$pages = ($num % $每页 == 0) ? ($num / $每页) : ((int) ($num / $每页) + 1);		if($pages == 0) $pages = 1;		$first = $number * $每页 - $每页 + 1;		$end = $number * $每页;				$return = "";		if($jiexi == "")		{			$return .= "您输入的查询表达式有错误或为空,\n";			$return .= "以下为您列举设定半径内所有方块记录\n";			$return .= "注意格式为\"<p|t|d|w>=<数据>;\"\n";		}		$return .= "§e-=§3高级查询结果§e=-§f\n";				$sql = "select * from zhy where x>={$xlow} and x<={$xhigh} and y>={$ylow} and y<={$yhigh} and z>={$zlow} and z<={$zhigh} and world='{$world}'{$jiexi} order by time asc;";		$result = $this->sql->query($sql);		while(!is_bool($ret = $result->fetchArray(SQLITE3_ASSOC)))		{			$cou++;			if($first <= $cou && $cou <= $end)			{				$pl = $ret["player"];				$ti = $ret["time"];				$action = $this->行为($ret["type"]);				$data = $ret["data"];				$canread = $this->时间可读函数($ti);				$arr = explode(":", $data);				if(count($arr) >= 2)				{					$bl = new Item($arr[0], $arr[1]);					$bname = $bl->getName();				}				else $bname = "Unknown";								$xx = $ret["x"];				$yy = $ret["y"];				$zz = $ret["z"];				$ll = $ret["world"];				if($bname == "") $bname = "Unknown";								$return .= "时间: §b{$canread} §f- §e玩家: {$pl}§e, 行为: §6{$action}§e, 方块: §c{$data}§f({$bname}§f)§e, 位置: §f(§6{$xx}§e, §6{$yy}§e, §6{$zz}§e, world: §6{$ll}§f)\n";			}		}		$return .= "§e-=====§f(§e{$number} §d/§c {$pages}§f)§e=====-§f\n";		$return .= "使用 §d/§6".Main::MAIN_COMMAND." page §f<§e页码§f> 进行翻页";		$this->ala[$player->getName()] = $str . "[|]" . $r;		return $return;	}			public function 文本解析($str)	{		$zz = "/([a-z]){1,1}=([A-Za-z0-9#:]{0,10});/";		preg_match_all($zz, $str, $out);		$return = "";		if(!isset($out[0][0]) || !isset($out[1][0]) || !isset($out[2][0])) return "";		$nn = count($out[0]);		for ($i = 0; $i < $nn; $i++)		{			switch ($out[1][$i])			{				case "p":					$return .= "and player like '" . $out[2][$i] . "' ";				break;								case "t":					$return .= "and type='" . $out[2][$i] . "' ";				break;								case "d":					$return .= "and data='" . $out[2][$i] . "' ";				break;								case "w":					$return .= "and world like '" . $out[2][$i] . "' ";				break;								default:				return "";			}		}		return $return;	}					public function 行为($n)	{		// 0:放置, 1:破坏, 2:更新, 3:水舀起, 4:水倒下, 5:岩浆舀起, 6:岩浆倒下		$result = 		[			"放置", "破坏", "更新", "水舀起", "水倒下", "岩浆舀起", "岩浆倒下"		];		return $result[$n];	}			public function close()	{		$this->sql->close();	}}?>